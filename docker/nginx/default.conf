upstream web {
    server web:8000;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=api_burst:10m rate=10r/s;

server {
    listen 80;
    server_name localhost;
    
    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Client max body size
    client_max_body_size 1M;
    
    # API endpoints with rate limiting
    location /api/ {
        # Apply rate limiting
        limit_req zone=api_limit burst=20 nodelay;
        limit_req zone=api_burst burst=5 nodelay;
        
        # Add security headers for API
        add_header X-API-Version "1.0.0" always;
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-API-Key" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-API-Key";
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type "text/plain; charset=utf-8";
            add_header Content-Length 0;
            return 204;
        }
        
        proxy_pass http://web;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }
    
    # Admin interface (more restrictive)
    location /admin/ {
        # More restrictive rate limiting for admin
        limit_req zone=api_limit burst=5 nodelay;
        
        proxy_pass http://web;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Static files
    location /static/ {
        alias /app/staticfiles/;
        expires 30d;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
        
        # Gzip static files
        gzip_static on;
    }
    
    # Media files
    location /media/ {
        alias /app/media/;
        expires 7d;
        add_header Cache-Control "public";
    }
    
    # Root redirect to API documentation
    location = / {
        return 301 /api/v1/docs/;
    }
    
    # Health check endpoint (no rate limiting)
    location = /health {
        access_log off;
        proxy_pass http://web/api/v1/health/;
        proxy_set_header Host $host;
    }
    
    # Security.txt
    location = /.well-known/security.txt {
        return 200 "Contact: admin@yourdomain.com\nExpires: 2025-12-31T23:59:59.000Z\n";
        add_header Content-Type text/plain;
    }
    
    # Block common attack vectors
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Handle 404 errors with custom response
    error_page 404 = @not_found;
    location @not_found {
        return 404 '{"success": false, "error": {"code": 404, "message": "Endpoint not found", "type": "NotFound"}, "data": null}';
        add_header Content-Type application/json always;
    }
    
    # Handle 50x errors
    error_page 500 502 503 504 = @server_error;
    location @server_error {
        return 500 '{"success": false, "error": {"code": 500, "message": "Internal server error", "type": "ServerError"}, "data": null}';
        add_header Content-Type application/json always;
    }
    
    # Handle rate limit errors
    error_page 429 = @rate_limit_error;
    location @rate_limit_error {
        return 429 '{"success": false, "error": {"code": 429, "message": "Rate limit exceeded", "type": "RateLimitError"}, "data": null}';
        add_header Content-Type application/json always;
    }
}

# HTTPS configuration (for production)
# server {
#     listen 443 ssl http2;
#     server_name yourdomain.com;
#     
#     ssl_certificate /etc/nginx/ssl/cert.pem;
#     ssl_certificate_key /etc/nginx/ssl/key.pem;
#     
#     # SSL configuration
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     
#     # HSTS
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#     
#     # Rest of the configuration same as HTTP
#     # ... (copy from above)
# }
